// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  groups           Group[]
  records          Record[]
  friends          User[]   @relation("friends")
  friendsRelation  User[]   @relation("friends")
  inFriendRequest  User[]   @relation("friendRequests")
  outFriendRequest User[]   @relation("friendRequests")

  @@map("users")
}

model Group {
  id     String  @id @default(cuid())
  name   String
  users  User[]
  habits Habit[]
}

model Habit {
  id      String   @id @default(cuid())
  name    String
  group   Group?   @relation(fields: [groupId], references: [id])
  groupId String?
  records Record[]
}

model Record {
  id        String   @id @default(cuid())
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  habit     Habit    @relation(fields: [habitId], references: [id])
  habitId   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
